/*
Nodo che si interfaccia via seriale ad arduino
derivato da ros_bridge_arduino
Lato ROS
subscribe: cmd_vel
publish: odom, pir,DOPPLER,bumpers

Interfaccia vs Arduino
TX:
pid parameters
pid demand
servo raspicam


RX
encoders count
bumbers

*/

// compilare con:
// catkin_make -DCATKIN_WHITELIST_PACKAGES="rm_ros_arduino"

// launch debug con gdb
//    <node name="ros_arduino" pkg="rm_ros_arduino" type="ros_arduino_node" launch-prefix="gdb -ex run --args"  output="screen">
  
#include <ros/ros.h>

#include <sys/time.h>

#include <geometry_msgs/Twist.h> // comandi
#include <iostream>				 // std::cout
#include <mutex>
#include <std_msgs/Bool.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>

#include <string> // std::string, std::to_string
using namespace std; 

#include <thread>
//--------------------
#include <cstdio>
#include <iostream>
#include <math.h>

//https://github.com/wjwwood/serial/blob/master/include/serial/serial.h
#include <serial/serial.h>
#include <unistd.h>
serial::Serial ser;
//---------------------
#include <tf/tf.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>



//includes for battery monitor----------------------------
#include "mraa/common.hpp"
#include "mraa/i2c.hpp"


//--------------------------------------------------------
/*
        git clone https://github.com/jbeder/yaml-cpp/blob/master/install.txt
        cd yaml-cpp
        mkdrir build
        cd build
        cmake ..
        make
        sudo make install

	#include "yaml-cpp/yaml.h"
 */


// COMANDI ------------------
#define CMD_ANALOG_READ "a"
#define CMD_GET_BAUDRATE "b"
#define CMD_PIN_MODE "c"
#define CMD_DIGITAL_READ "d"
#define CMD_READ_ENCODERS "e"
#define CMD_HELP "h"
#define CMD_MOTOR_SPEEDS "m"
#define CMD_PING "p"
#define CMD_RESET_ENCODERS "r"
#define CMD_SERVO_WRITE "s"
#define CMD_SERVO_READ "t"
#define CMD_UPDATE_PID "u"
#define CMD_DIGITAL_WRITE "w"
#define CMD_ANALOG_WRITE "x"

#define CMD_DIGITAL_READ_BUMPERS "B"
#define CMD_MOTOR_RPS "M"
#define CMD_PIDRATE "R"
#define CMD_SAFE_CMD "S"
#define CMD_TESTMOTORS "T"
#define CMD_READ_PID "U"
#define CMD_MOTOR_CONTROL "C"

#define LEFT_MOTOR 0
#define RIGHT_MOTOR 1
#define CMD_SEPARATOR " "
#define PORT_DIR_IN 0
#define PORT_DIR_OUT 1

//----------------------------
/// ///////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////
/// M A C R O
///  
/// ///////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////
	//#define dbgf(...) ROS_INFO(__VA_ARGS__)
	#define dbgf(...) 
	# define ROS_NOW  ros::Time::now(); /*Arduino IDE: millis();*/
#define SLEEP_MS(ms) std::this_thread::sleep_for(std::chrono::milliseconds(ms));

template <typename T>
int sgn(T val) { return (T(0) < val) - (val < T(0)); }
////////////////////////////////////////////////////////////////////////////////////
// mappa 'value' espresso nel range [istart,istop] nel dominio [ostart,ostop]
float remap(float value, float istart, float istop, float ostart, float ostop)
{
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


/// ///////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////
///  SYSINFO UPTIME                       
/// ///////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////
#if 1

	//~ struct sysinfo {
		//~ long uptime;             /* Seconds since boot */
		//~ unsigned long loads[3];  /* 1, 5, and 15 minute load averages */
		//~ unsigned long totalram;  /* Total usable main memory size */
		//~ unsigned long freeram;   /* Available memory size */
		//~ unsigned long sharedram; /* Amount of shared memory */
		//~ unsigned long bufferram; /* Memory used by buffers */
		//~ unsigned long totalswap; /* Total swap space size */
		//~ unsigned long freeswap;  /* swap space still available */
		//~ unsigned short procs;    /* Number of current processes */
		//~ unsigned long totalhigh; /* Total high memory size */
		//~ unsigned long freehigh;  /* Available high memory size */
		//~ unsigned int mem_unit;   /* Memory unit size in bytes */
		//~ char _f[20-2*sizeof(long)-sizeof(int)]; /* Padding for libc5 */
	//~ };
	//~ struct sysinfo pi3info;  /// richiede include sys/sysinfo.h

	#include <linux/kernel.h>
	//~ #include <linux/sys.h>
	#include <stdio.h>
	
	//~ #include <sys/sysinfo.h>
	#include  "sys/sysinfo.h"

	int uptimeSec()	{
		/* Conversion constants. */
		const long minute = 60;
		const long hour = minute * 60;
		const long day = hour * 24;
		const double megabyte = 1024 * 1024;
		/* Obtain system statistics. */
		struct sysinfo si;
		sysinfo (&si);		

		return si.uptime;
	}

	int sysInfo ()	{
		/* Conversion constants. */
		const long minute = 60;
		const long hour = minute * 60;
		const long day = hour * 24;
		const double megabyte = 1024 * 1024;
		/* Obtain system statistics. */
		struct sysinfo si;
		sysinfo (&si);
		/* Summarize interesting values. */
		printf ("system uptime : %ld days, %ld:%02ld:%02ld\n", 
		 	si.uptime / day, (si.uptime % day) / hour, 
		 	(si.uptime % hour) / minute, si.uptime % minute);
		printf ("total RAM   : %5.1f MB\n", si.totalram / megabyte);
		printf ("free RAM   : %5.1f MB\n", si.freeram / megabyte);
		printf ("process count : %d\n", si.procs);
		return 0;
	}


#endif


//######################################################
// Monitoraggio del carico (Load)
//######################################################
//ritorna la percentuale di carica della batteria


	float  WattHours =0.0;
	
	void updateWattHours(float watt, float_t sec){
		float dWh = watt*sec/(float)3600.0;
		WattHours += dWh;
		//printf("\nWattHours %f,  dWh %f @sec %f",WattHours, dWh, sec);
		//return WattHours;
	}


//######################################################
//######################################################
// COMANDI VERSO ARDUINO SU SERIALE CON ATTESA ACK
//######################################################
//######################################################


//######################################################
// Inizializza la porta seriale usando i parametri e la apre
//######################################################
bool initSerial(string serial_port, string serial_speed){

	// SERIAL  port, baudrate, timeout in milliseconds
	try
	{
		ROS_INFO_STREAM("Setting Serial Port...");
		ser.setPort(serial_port);
		ser.setBaudrate(std::stoi(serial_speed));
		serial::Timeout to = serial::Timeout::simpleTimeout(1000);
		ser.setTimeout(to);
		ser.open();

	}
	catch (serial::IOException &e)
	{
		ROS_ERROR_STREAM("Unable to open port ");
		return false;
	}

	if (ser.isOpen())
	{
		ROS_INFO_STREAM("Serial Port initialized");
		//ser.println('O');
		return true;
	}
	else
	{
		return false;
	}	
}


//#define MAX_ARDUINO_PIN 50
#define DEFAULT_RX_TIMEOUT_SEC 0.010f
#define MAX_RX_RETRIES 3
#define MAX_TX_RETRIES 2

//http://wjwwood.io/serial/doc/1.1.0/index.html

//http://wjwwood.io/serial/doc/1.1.0/classserial_1_1_serial.html#a010b18ec545dfe1a7bb1c95be4bdaa54
std::string rx_string(float timeout_sec = DEFAULT_RX_TIMEOUT_SEC){
	std::string result;
	
	result = ser.readline(1000, "\r" );
	//dbgf("RX<--:%s", result.c_str());
	return result;
	/*			
		//ser.flushInput();
		ros::Time timeout =ros::Time::now() + ros::Duration(timeout_sec);
		bool blMsgReceived = false;
		while ((ros::Time::now() < timeout) && (!blMsgReceived))
		{
			if (ser.available())
			{
				// ROS_INFO_STREAM("Reading from serial port");

				result = ser.readline();
				dbgf("\nRX<--:%s", result.c_str());
				blMsgReceived = true;

				// ROS_INFO_STREAM("Read: " << result);
			}
		}
		return result;	

	*/
}
//attende l'arrivo di uno specifico carattere
bool waitChar(char expectedChar ,float timeout_sec = DEFAULT_RX_TIMEOUT_SEC )
{
	//bool blArrived = false;
	//while (!ser.available()){  SLEEP_MS(100); }
		
	std::string input = rx_string(timeout_sec);
		
	return 	(input[0]==expectedChar)	;

 	
}

bool wait_ack(float timeout_sec = DEFAULT_RX_TIMEOUT_SEC)
{
	std::string ack = rx_string(timeout_sec);
	//if (ack.compare("OK\r") == 1)	{
		if ((ack[0]=='O') && (ack[1]=='K')){
		dbgf("\nACK");
		return true; 		
		}
	else{
		return false;	
		}
}

//http://wjwwood.io/serial/doc/1.1.0/classserial_1_1_serial.html#aa020880cdff3a370ddc574f594379c3c
inline bool tx(std::string cmd)
{
	ser.flushOutput();
	cmd += "\r";	
	ser.write(cmd.c_str());
	ser.flushInput();
	//dbgf("-->TX: %s",cmd.c_str() );
}
bool tx_ack(std::string cmd)
{
	bool blAck=false;
	int retries = 0;
	while (!blAck && (retries < MAX_TX_RETRIES))
	{
		
		tx(cmd);	
		
		blAck = wait_ack();
		if (!blAck)
		{
			retries++;
			
		}
			
		//sleep(0.002f);
	}	

}
//######################################################
typedef struct
{
	std::string name;
	std::string specs; // pin , type, rate , direction
	int pin;
	std::string type;
	int direction;
	int rate;
	bool used;
	int value;

} Sensor_t;

boost::mutex mtx_serial;

enum speechBat_e
{
	UNKNOWN,
	CHARGING,
	DISCHARGING,
	CHARGED,
	DISCHARGED,
	EMPTY
};



//######################################################
//######################################################
// CLASSE Ros_arduino
//######################################################
//######################################################
class Ros_arduino
{
public:
	Ros_arduino(ros::NodeHandle &nh);
	//~Ros_arduino();

private:
	// dati della porta seriale
	std::string serial_port;
	std::string serial_speed;

	//	std::mutex serial_mutex;
	// nodo
	float par_rate; // freq. nodo

	// Publisher
	ros::Publisher pub_pir;
	ros::Publisher pub_DOPPLER;
	
	//ros::Publisher pub_sensors_in[MAX_ARDUINO_PIN];
	
	// Encoders 
	ros::Publisher pub_encoders;	
	ros::Publisher pub_encL;
	ros::Publisher pub_encR;	
	
	geometry_msgs::Vector3Stamped msg_encoders;
	std_msgs::Float64 msg_encL;
	std_msgs::Float64 msg_encR;

	ros::Publisher pub_AD0;	
	ros::Publisher pub_AD1;	



	std_msgs::Int32 msg_bumpers;	
	ros::Publisher pub_bumpers;	




	// Subscribes
	ros::Subscriber sub_cmdvel;
	ros::Subscriber sub_faretto;
	ros::Subscriber sub_laser;	
	ros::Subscriber sub_servo_raspicam;
	ros::Subscriber sub_lidar_enable;
	ros::Subscriber sub_pidL_ouput;
	ros::Subscriber sub_pidR_ouput;
		
	//ros::Subscriber sub_sensors_out[MAX_ARDUINO_PIN];


	// Parametri
	float rate_sensors;
	float rate_encoders;
	float wheel_diameter;
	float wheel_track;
	float encoder_resolution;
	float gear_reduction;
	float Kp;
	float Kd;
	float Ki;
	float Ko;
	float accel_limit;
	bool motors_reversed;	// true se i motori sono invertiti
	int encL;
	int encR;
	//std::string config_file; // nome file yaml nel folder config
	//Sensor_t sensors[MAX_ARDUINO_PIN];
	bool isRobotMoving;

	void getAndPublishPir();
	void getAndPublishDOPPLER();
	void getAnPublishEncoders();
	void getAndPublishDigitalInput();
	void getAndPublishBumpers();

	// Callback
	void cbk_cmdvel(const geometry_msgs::Twist cmdvel);
	void cbk_pidL_ouput(const std_msgs::Float64 pid_output);
	void cbk_pidR_ouput(const std_msgs::Float64 pid_output);
	
	void cbk_faretto(const std_msgs::Bool msg);
	void cbk_laser(const std_msgs::Bool msg);
	
	void cbk_servo_raspicam(const std_msgs::Int16 msg);
	void servo_raspicam(int16_t angle);
	/*  tentativi falliti -*********************************************
		//	void cbk_sensor_out(const ros::MessageEvent<std_msgs::Bool const> &event,const std::string &topic);
		//	void cbk_sensor_out(const ros::MessageEvent<std_msgs::String const>& event);
		void cbk(const ros::MessageEvent<std_msgs::String const>& event);
			void cbk1(const std_msgs::String::ConstPtr &msg,
					const std::string &topic);
	******************************************************************** */
	void cbk_lidar_enable(const std_msgs::Bool msg);
	
	
	
	void sync();
	
	
	//battery	
	std_msgs::Float64 msg_load_volt;	
	ros::Publisher pub_load_volt;
	
	std_msgs::Float64 msg_load_ampere;
	ros::Publisher pub_load_ampere;
		
	std_msgs::Float64 msg_load_watt;		
	ros::Publisher pub_load_watt;
	
	std_msgs::Float64 msg_load_watthours;
	ros::Publisher pub_load_watthours;
	
	//lidar enable
	std_msgs::Bool msg_lidar_enable;
	ros::Publisher pub_lidar_enable;


	float adc2Volt; // fattore di conversione ADC 0..1023 alla tensione letta al pin
	float sensorVolt2batteryVolt; // fattore di  conversione Vbat/Vsensorout : circa 4.9
	int16_t analogRead(std::string pin); //chiede ad arduino la lettura ADC
	void getAndPublishLoad();
	float servo_initial_angle_deg;
	
	ros::Time next_time_battery;
	ros::Duration interval_battery;
	float rate_battery;
	
	// speech----------------
	std_msgs::String msg_chatter, msg_speech_coded;
	ros::Publisher pub_chatter, pub_speech_coded;
	speechBat_e lastWarningBatteryStatus;
	void speech(std::string msg);
	void speech_coded(std::string msg);
	void speechOnce(speechBat_e  batterystatus);
	
	
	// bumpers ------------------
	int bumpers=0;
	
};


void Ros_arduino::speech(std::string msg) {
  msg_chatter.data = msg;
  pub_chatter.publish(msg_chatter);
  //ROS_INFO("[SPEECH] %s", msg.c_str());
}
void Ros_arduino::speech_coded(std::string msg) {
  msg_speech_coded.data = msg;
  pub_speech_coded.publish(msg_speech_coded);
  //ROS_INFO("[SPEECH] %s", msg.c_str());
}
//avvisa una sola volta di dove si trova la persona detettata
void Ros_arduino::speechOnce( speechBat_e  batterystatus){

	if (batterystatus != lastWarningBatteryStatus) {

		switch (batterystatus) {
		

		case UNKNOWN:
			speech("stato batteria sconosciuto");
			ROS_INFO("SPEEECH: stato batteria sconosciuto");		
			break;
			
		case CHARGING:
			speech("Grazie per ricaricarmi");
			ROS_INFO("SPEEECH:  Grazie per ricaricarmi");
			break;

		case DISCHARGING:
			speech("okei ora posso muovermi");
			ROS_INFO("SPEEECH: okei ora posso muovermi");		  	
			break;
		
		case CHARGED:
			speech("sono carico. puoi staccare la presa");
			ROS_INFO("SPEEECH: sono carico. puoi staccare la presa");    	
			break;
			
		case DISCHARGED:
			speech("sono scarico. è ora di ricaricarmi");
			ROS_INFO("SPEEECH: sono scarico. è ora di ricaricarmi");   	
			break;
			
		case EMPTY:
			speech("BATTERIA COMPLETAMENTE SCARICA");
			ROS_INFO("SPEEECH:!!! BATTERIA COMPLETAMENTE SCARICA!!!");   	
			break;
			
 	
		default:
			break;
		}

		lastWarningBatteryStatus = batterystatus;
	}
}

//--------------------------------------------------------
// lidar_enable C A L L B A C K 
//--------------------------------------------------------
 
#define PIN_LIDAR_ENABLE "22"
void Ros_arduino::cbk_lidar_enable(const std_msgs::Bool msg){
	string strValue;
	if (msg.data==true)
	{
		strValue = "1";
	}else
	{
		strValue = "0";
	}
	
	
	const string cmd=  (string)CMD_DIGITAL_WRITE 
						+(string)CMD_SEPARATOR  
						+(string)PIN_LIDAR_ENABLE
						+(string)CMD_SEPARATOR
						+(string)strValue;
	mtx_serial.lock();
	tx_ack(cmd);
	mtx_serial.unlock();
	ROS_INFO_THROTTLE(1,"lidar_enable: %s",cmd.c_str());

}

//--------------------------------------------------------
// faretto C A L L B A C K 
//--------------------------------------------------------
//#define PIN_FARETTO "12"
#define PIN_FARETTO "12"
void Ros_arduino::cbk_faretto(const std_msgs::Bool msg){
	string strValue;
	if (msg.data==true)
	{
		strValue = "1";
	}else
	{
		strValue = "0";
	}
	
	
	const string cmd=  (string)CMD_DIGITAL_WRITE 
						+(string)CMD_SEPARATOR  
						+(string)PIN_FARETTO
						+(string)CMD_SEPARATOR
						+(string)strValue;
	ROS_INFO_THROTTLE(1,"Faretto: %s",cmd.c_str());
	mtx_serial.lock();
	tx_ack(cmd);
	mtx_serial.unlock();

}

//--------------------------------------------------------
// LASER  C A L L B A C K 
//--------------------------------------------------------
//#define PIN_FARETTO "12"
#define PIN_LASER "11"
void Ros_arduino::cbk_laser(const std_msgs::Bool msg){
	string strValue;
	if (msg.data==true)
	{
		strValue = "1";
	}else
	{
		strValue = "0";
	}
	
	
	const string cmd=  (string)CMD_DIGITAL_WRITE 
						+(string)CMD_SEPARATOR  
						+(string)PIN_LASER
						+(string)CMD_SEPARATOR
						+(string)strValue;
	ROS_INFO_THROTTLE(1,"Laser: %s",cmd.c_str());//dbgf("\nCBK Faretto");
	mtx_serial.lock();
	tx_ack(cmd);
	mtx_serial.unlock();

}


//--------------------------------------------------------
// cmd_vel C A L L B A C K 
//--------------------------------------------------------
void Ros_arduino::cbk_cmdvel(geometry_msgs::Twist cmdvel) {
	std::string cmd;
	
	if (  (bumpers== 0) || ( (cmdvel.linear.x ==0.0f) & (cmdvel.angular.z==0.0f) ) )
	{
		float x = cmdvel.linear.x;
		float th = cmdvel.angular.z;
		float left;
		float right;

		if (x == 0.0f) {
			// Turn in place
			right = th * wheel_track / 2.0;
			left = -right;
		} else if (th == 0.0f) {
			// Pure forward/backward motion
			left = x;
			right = x;
		} else {
			// Translation + Rotation
			left = x - th * wheel_track / 2.0;
			right = x + th * wheel_track / 2.0;
		}

		// ------------------------
		// trasformo le velocità delle ruote in velocità asse motore--
		//float left_revs_per_second = gear_reduction * left / (wheel_diameter * M_PI);
		//float right_revs_per_second = gear_reduction * right / (wheel_diameter * M_PI);
		double K = gear_reduction / (wheel_diameter * M_PI);		
		float left_revs_per_second = left * K ;
		float right_revs_per_second = right* K ;
		cmd=  (string)CMD_MOTOR_RPS//(string)CMD_MOTOR_SPEEDS 
			+(string)CMD_SEPARATOR
			+ std::to_string(left_revs_per_second) 
			+(string)CMD_SEPARATOR 
			+ std::to_string(right_revs_per_second);

		isRobotMoving=true;
		ROS_INFO_THROTTLE(1.0,"mot.cmd: %s" , cmd.c_str());
	
	} 
	else //fermo i motori
	{
		cmd=  (string)CMD_MOTOR_RPS//(string)CMD_MOTOR_SPEEDS 
		+(string)CMD_SEPARATOR
		+ std::to_string(0) 
		+(string)CMD_SEPARATOR 
		+ std::to_string(0);
		isRobotMoving=false;
		ROS_INFO("    ***STOP***");
	}


	
	//dbgf("\nCBK cmd_vel");
	mtx_serial.lock();
	tx(cmd);//tx_ack(cmd);
	mtx_serial.unlock();
	// dbgf(cmd.c_str());
}

//--------------------------------------------------------
// pid control_effort C A L L B A C K 
//--------------------------------------------------------
void Ros_arduino::cbk_pidL_ouput(std_msgs::Float64 pid_output){
	std::string cmd;
 
	cmd=  (string)CMD_MOTOR_CONTROL//(string)CMD_MOTOR_SPEEDS 
			+(string)CMD_SEPARATOR
			+ std::to_string(LEFT_MOTOR) 
			+(string)CMD_SEPARATOR 
			+ std::to_string(pid_output.data);
			
	dbgf("\nCBK cbk_pidL_ouput: ",pid_output.data);
	mtx_serial.lock();
	tx(cmd);//tx_ack(cmd);
	mtx_serial.unlock();
	// dbgf(cmd.c_str());			
}
void Ros_arduino::cbk_pidR_ouput(std_msgs::Float64 pid_output){
	std::string cmd;
 
	cmd=  (string)CMD_MOTOR_CONTROL//(string)CMD_MOTOR_SPEEDS 
			+(string)CMD_SEPARATOR
			+ std::to_string(RIGHT_MOTOR) 
			+(string)CMD_SEPARATOR 
			+ std::to_string(pid_output.data);
			
	dbgf("\nCBK cbk_pidR_ouput: ",pid_output.data);
	mtx_serial.lock();
	tx(cmd);//tx_ack(cmd);
	mtx_serial.unlock();
	// dbgf(cmd.c_str());			
}

//--------------------------------------------------------
// lettura e pubblicazione Encoders
//--------------------------------------------------------
void Ros_arduino::getAnPublishEncoders(){

	std::string cmd =(string)CMD_READ_ENCODERS;
	bool ok = false;
	while (!ok)
	{
		mtx_serial.lock();
		tx(cmd);
		// attendo la ricezione dei valori dei due encoders
		std::string  strCallback = rx_string();
		mtx_serial.unlock();
		//dbgf("\n\tcbk from arduino: %s", strCallback.c_str());

		//converto la stringa nei due valori
		std::string::size_type sz;
		
		if (strCallback !="")
		{
			//std::cout << strCallback ;
			try
			{
				msg_encoders.vector.x = (float)stoi(strCallback , &sz);
				
				msg_encoders.vector.y =  (float)stoi(strCallback.substr(sz), &sz );
				ok=true;
			}
			catch(const std::exception& e)
			{
				std::cerr<< " Enc Excep. ["<<strCallback<<"]\n";			
				std::cerr << "exception caught: " << e.what() << '\n';
			}



			
		}

		
	}

	msg_encoders.header.stamp = ros::Time::now();
	pub_encoders.publish(msg_encoders);
	
	msg_encL.data = (float)msg_encoders.vector.x ;
	msg_encR.data = (float)msg_encoders.vector.y ;	
	pub_encL.publish(msg_encL);
	pub_encR.publish(msg_encR);	



	//dbgf("\nEnc1 : %f, Enc2 %f",msg_encoders.vector.x ,msg_encoders.vector.y);


}


 
//--------------------------------------------------------
// P I R
//--------------------------------------------------------
#define PIN_PIR "33"
void Ros_arduino::getAndPublishPir(){

	if (!isRobotMoving) //pubblica solo se il robot non si muove
	{
		std::string cmd =(string)CMD_DIGITAL_READ +(string)CMD_SEPARATOR +(string)PIN_PIR;
		mtx_serial.lock();
		tx(cmd);
		// attendo la ricezione dei valori dei due encoders
		std::string  strCallback = rx_string();
		mtx_serial.unlock();

		std_msgs::Bool msg;

		try
		{
			msg.data = (bool)stoi(strCallback );	 
		}
		catch(const std::exception& e)
		{
			std::cerr << "***Pir EXCEPTION*** ["<< strCallback  <<"]"<< e.what() << '\n';
		}
	 
		pub_pir.publish(msg);	
	}
}


//--------------------------------------------------------
// D O P P L E R
//--------------------------------------------------------
#define PIN_DOPPLER "34"
void Ros_arduino::getAndPublishDOPPLER(){
	if (!isRobotMoving) //pubblica solo se il robot non si muove
	{
		std::string cmd =(string)CMD_DIGITAL_READ +(string)CMD_SEPARATOR +(string)PIN_DOPPLER;
		mtx_serial.lock();
		tx(cmd);
		// attendo la ricezione dei valori dei due encoders
		std::string  strCallback = rx_string();
		mtx_serial.unlock();

	 
		std_msgs::Bool msg;
		try
		{
			msg.data = (bool)stoi(strCallback );
		}
		catch(const std::exception& e)
		{
			std::cerr << "***Pir 1 EXCEPTION*** ["<< strCallback  <<"]"<< e.what() << '\n';
			 
		}
			
		pub_DOPPLER.publish(msg);
	}
}


//--------------------------------------------------------
// B U M P E R S
//--------------------------------------------------------

void Ros_arduino::getAndPublishBumpers(){
	std::string cmd =(string)CMD_DIGITAL_READ_BUMPERS ;
	mtx_serial.lock();
	tx(cmd);
	// attendo la ricezione d
	std::string  strCallback = rx_string();
	mtx_serial.unlock();

	std_msgs::Int32 msg;

	try
	{
		bumpers = stoi(strCallback );	 
		msg.data = bumpers;
	}
	catch(const std::exception& e)
	{
		std::cerr << "***BUMPERS READ EXCEPTION*** ["<< strCallback  <<"]"<< e.what() << '\n';
	}
	pub_bumpers.publish(msg);
 
 	if (bumpers != 0)
	 {
		speech("oops");
	 }
}

//--------------------------------------------------------
// SERVO
//--------------------------------------------------------

#define SERVO_RASPICAM "1"
void Ros_arduino::servo_raspicam(int16_t angle){
	string strValue = std::to_string( angle );

	const string cmd=  (string)CMD_SERVO_WRITE
						+(string)CMD_SEPARATOR  
						+(string)SERVO_RASPICAM
						+(string)CMD_SEPARATOR
						+(string)strValue;
	//dbgf("\nCBK Servo Raspicam %s",strValue.c_str() );
	mtx_serial.lock();
	tx_ack(cmd);
	mtx_serial.unlock();
}

void Ros_arduino::cbk_servo_raspicam(std_msgs::Int16 msg){

	servo_raspicam(msg.data);
}


//--------------------------------------------------------
// lettura e pubblicazione Digital Inputs
//--------------------------------------------------------
void Ros_arduino::getAndPublishDigitalInput(){
	getAndPublishPir();
	getAndPublishDOPPLER();
	getAndPublishBumpers();
}

#define PIN_BAT_VOLT "0"
#define PIN_BAT_AMPERE "1"

int16_t Ros_arduino::analogRead(std::string pin){
	std::string cmd =(string)CMD_ANALOG_READ +(string)CMD_SEPARATOR +(string)pin;
	mtx_serial.lock();
	tx(cmd);
	// attendo la ricezione dei valori dei due encoders
	std::string  strCallback = rx_string();
	mtx_serial.unlock();
	
 	int16_t returnValue=-1;
	try
	{
		returnValue = (int16_t)stoi(strCallback );
	}
	catch(const std::exception& e)
	{
		std::cerr << "***AD EXCEPTION*** ["<< strCallback  <<"]"<< e.what() << '\n';
		 
	}
	return returnValue;
}


void Ros_arduino::getAndPublishLoad(){



	// VOLT
	// adc2Volt=0.004888 ; //fattore di conversione	5v = 1023
	float Vbat = (float)analogRead(PIN_BAT_VOLT)*adc2Volt*sensorVolt2batteryVolt;
	
	// AMPERE
	float Abat =  (float)analogRead(PIN_BAT_AMPERE)*adc2Volt*1;
	

		msg_load_volt.data =   Vbat ;
		msg_load_ampere.data = Abat;	
		msg_load_watt.data = Vbat * Abat;
		WattHours += msg_load_watt.data * interval_battery.toSec()/3600.0f;
		msg_load_watthours.data = WattHours;
		

		ROS_INFO_THROTTLE(4, "Load:  W:%.2f | Wh %.2f | (Input: %.2fV , %.2fA )| @%d sec ( %d ', %d h)",
					 msg_load_watt.data, msg_load_watthours.data,msg_load_volt.data, msg_load_ampere.data,uptimeSec() , uptimeSec()/60, uptimeSec()/3600);

		pub_load_volt.publish(msg_load_volt);
		pub_load_ampere.publish(msg_load_ampere);
		pub_load_watt.publish(msg_load_watt);
		pub_load_watthours.publish(msg_load_watthours);

}

void Ros_arduino::sync(){
		ROS_INFO_STREAM("\nWaiting OK from Arduino....");
		bool blSync = false;
		while (!blSync)
		{
	 		tx("@\r");
			blSync = waitChar('@'); /* code for loop body */
			 
			SLEEP_MS(100);
		}
		SLEEP_MS(1000);
		ROS_INFO_STREAM("\nSYNCHRONIZED WITH Arduino....");
}
////////////////////////////////////////////////////////////////////////////////////
// Costruttore
Ros_arduino::Ros_arduino(ros::NodeHandle &nh)
{

	// inizializzo le variabili
	//for (size_t i = 0; i < MAX_ARDUINO_PIN; i++){sensors[i].used = false;}

	//-----------------------------------------------------------------
	// Leggo i parametri (launch file)
	//-----------------------------------------------------------------
	nh.param<float>("rate", par_rate, 10);
	nh.param<float>("rate_encoders", rate_encoders, 30);
	nh.param<float>("rate_sensors", rate_sensors, 1);
	nh.param<float>("rate_battery", rate_battery, 0.33);
	nh.param<std::string>("serial_port", serial_port, "/dev/tty/ACM0");
	nh.param<std::string>("serial_speed", serial_speed, "115200");
	nh.param<float>("wheel_diameter", wheel_diameter, 1);
	nh.param<float>("wheel_track", wheel_track, 1);
	nh.param<float>("encoder_resolution", encoder_resolution, 1);
	nh.param<float>("gear_reduction", gear_reduction, 1);
	
	nh.param<float>("adc2Volt", adc2Volt, 0.004888);
	nh.param<float>("sensorVolt2batteryVolt", sensorVolt2batteryVolt, 4.9);

	nh.param<float>("servo_initial_angle_deg", servo_initial_angle_deg, 90);


	nh.param<float>("rate_sensors", rate_sensors, 10);
	ros::Duration  interval_sensors = ros::Duration( 1/rate_sensors);
	ros::Time next_time_sensors  = ros::Time::now() ;
	ros::Duration  interval_encoders = ros::Duration( 1/rate_encoders);
	ros::Time next_time_encoders  = ros::Time::now() ;
	/*

			//-----------------------------------------------------------------
			// gestione file yaml
			//-----------------------------------------------------------------
			//nh.param<std::string>("config_file", config_file, "ros_arduino.yaml");
			YAML::Node yaml = YAML::LoadFile(config_file);
			XmlRpc::XmlRpcValue paramList;

			int pin;

			if (nh.getParam("sensors", paramList)) // se esiste la sezione sensors
			{
				std::map<std::string, XmlRpc::XmlRpcValue>::iterator i;
				for (i = paramList.begin(); i != paramList.end(); i++)
				{
					// sensor_specs.assign(i->second["pin"]);
					pin = i->second["pin"];

					sensors[pin].name = i->first;
					sensors[pin].type = static_cast<std::string>(i->second["type"]);
					sensors[pin].rate = i->second["rate"];
					if (static_cast<std::string>(i->second["direction"]) == "input")
					{
						sensors[pin].direction = PORT_DIR_IN;
					}
					else
					{
						sensors[pin].direction = PORT_DIR_OUT;
					}

					sensors[pin].used = true;

					ROS_INFO("\nSensor: %s : pin %d,  type:%s ,rate: %d , direction %d",
							sensors[pin].name.c_str(), pin, sensors[pin].type.c_str(),
							sensors[pin].rate, sensors[pin].direction);
				}
				dbgf("\n");
			}
			else
			{
				ROS_INFO("NO SECTION sensors");
			}

	*/

	//-----------------------------------------------------------------
	// subscribes
	//-----------------------------------------------------------------

    sub_cmdvel = nh.subscribe("/cmd_vel", 1, &Ros_arduino::cbk_cmdvel, this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /cmd_vel");							  

	sub_pidL_ouput = nh.subscribe("/left_wheel/control_effort",  1,  &Ros_arduino::cbk_pidL_ouput,this,
							  ros::TransportHints().tcpNoDelay());
	sub_pidR_ouput = nh.subscribe("/right_wheel/control_effort", 1,  &Ros_arduino::cbk_pidR_ouput,this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /left_wheel/control_effort  , /right_wheel/control_effort ");							  

	sub_faretto = nh.subscribe("/faretto", 1, &Ros_arduino::cbk_faretto, this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /faretto");							  
							  
	sub_laser = nh.subscribe("/laser", 1, &Ros_arduino::cbk_laser, this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /laser");							  
	sub_servo_raspicam = nh.subscribe("/servo_raspicam", 1, &Ros_arduino::cbk_servo_raspicam, this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /servo_raspicam");
	sub_lidar_enable = nh.subscribe("/lidar_enable", 1, &Ros_arduino::cbk_lidar_enable,this,
							  ros::TransportHints().tcpNoDelay());
	ROS_INFO("sub. /lidar_enable");			
	
	

	//-----------------------------------------------------------------
	// advertise publishes
	//-----------------------------------------------------------------
	// publish di tutte le porte in input
	pub_pir = nh.advertise<std_msgs::Bool>("/pir", 1);
	pub_DOPPLER = nh.advertise<std_msgs::Bool>("/doppler", 1);
	
 
	pub_chatter = nh.advertise<std_msgs::String>("/chatter", 1);
 	
	pub_bumpers = nh.advertise<std_msgs::Int32>("/bumpers",1);

	pub_encoders = nh.advertise<geometry_msgs::Vector3Stamped>("/encoders",1);
	pub_encL = nh.advertise<std_msgs::Float64>("/encL",1);
	pub_encR = nh.advertise<std_msgs::Float64>("/encR",1);

	


		///---------------------------------------------------------------
		/// BATTERY ROS Publisher 
		///---------------------------------------------------------------
		//The second parameter to advertise() is the size of the message queue
		// per vederlo in un pannello mqtt modificare il file pi3-mqtt.yaml
		next_time_battery  = ros::Time::now() ;
		
		pub_load_volt = nh.advertise<std_msgs::Float64>("/load_volt", 1);
		msg_load_volt.data = 0x0;

		
		pub_load_ampere = nh.advertise<std_msgs::Float64>("/load_ampere", 1);
		msg_load_ampere.data = 0.0;
		
		
		pub_load_watt = nh.advertise<std_msgs::Float64>("/load_watt", 1);
		msg_load_watt.data = 0.0;

		
		pub_load_watthours = nh.advertise<std_msgs::Float64>("/load_watthours", 1);
		msg_load_watthours.data = 0.0;
		
		

		pub_chatter = nh.advertise<std_msgs::String>("/chatter",1);

		lastWarningBatteryStatus = UNKNOWN;
		
		///---------------------------------------------------------------
		/// Vars init
		///---------------------------------------------------------------
		/// inizializza il consumo ipotizzando un consumo costante fino a questo momento
		
		//WattHours =adc_read_battery_Watt() *(float)uptimeSec()/3600;
		//printf(" %f Wh Estimated from power @%d sec ago",WattHours, uptimeSec());
	











	/* prove *******************************************************************

		for (size_t i = 0; i < MAX_ARDUINO_PIN; i++)
		{
			if ((sensors[i].used) && (sensors[i].type == "Digital"))
			{
				if (sensors[i].direction == PORT_DIR_IN)
				{ // INPUT
					pub_sensors_in[i] = nh.advertise<std_msgs::Bool>(sensors[i].name, 1);
				}
				else
				{ // output
							const char *tpc = "bumper1";
							sub_sensors_out[i] =
								//   nh.subscribe(sensors[i].name, 1,&Ros_arduino::cbk_sensor_out, this, ros::TransportHints().tcpNoDelay()); 
								// nh.subscribe<std_msgs::String>(sensors[i].name, 1, boost::bind(&Ros_arduino::cbk ,_1, sensors[i].name));

								nh.subscribe<std_msgs::String>(
									sensors[i].name, 1,
									boost::bind(&Ros_arduino::cbk1, this,_1, &sensors[i].name)
								);
				}
				// imposto la direzione della porta su arduino
				std::string cmd =
					CMD_PIN_MODE + std::string(CMD_SEPARATOR) +
					std::to_string(sensors[i].pin) + CMD_SEPARATOR +
					std::to_string(sensors[i].direction);
				tx_ack(cmd);
			}
		}
	******************************************************************* */





	//-----------------------------------------------------------------
	if (initSerial(serial_port,serial_speed))
	{

		sleep(10);
		//sync();


		////////////////////////////////////////////////////////////////////////////////////
		// assegna i valori di default agli output di arduino
		////////////////////////////////////////////////////////////////////////////////////
		servo_raspicam(static_cast<int16_t>(servo_initial_angle_deg));



		ros::Rate rate(par_rate);
		interval_battery =ros::Duration(1/rate_battery);
		////////////////////////////////////////////////////////////////////////////////////
		// main loop
		////////////////////////////////////////////////////////////////////////////////////
		while (ros::ok())
		{
			if (ros::Time::now() > next_time_encoders )
			{			
				getAnPublishEncoders();
				next_time_encoders  = ros::Time::now() + interval_encoders;

			}
			if (ros::Time::now() > next_time_sensors )
			{
				getAndPublishDigitalInput();

				next_time_sensors  = ros::Time::now() + interval_sensors;

			}
			if (ros::Time::now() > next_time_battery )
			{
				getAndPublishLoad();

				next_time_battery  = ros::Time::now() + interval_battery;

			}
			ros::spinOnce(); // gestisce i callback
			//rate.sleep();
		}

	}




}

//----------------------------------------------------
int main(int argc, char **argv)
{
	ros::init(argc, argv, "ros_arduino_node");

	ros::NodeHandle nh("~");

	Ros_arduino node = Ros_arduino(nh);

	return 0;
}
